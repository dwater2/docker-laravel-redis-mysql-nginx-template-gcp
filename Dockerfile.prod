FROM php:7.3.6-fpm-alpine3.9 as builder
 
RUN apk add --no-cache shadow openssl bash mysql-client nodejs npm
 
RUN docker-php-ext-install mysqli pdo pdo_mysql
 
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

ENV DOCKERIZE_VERSION v0.6.1
RUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && tar -C /usr/local/bin -xzvf dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && rm dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz
 
WORKDIR /var/www
RUN rm -rf /var/www/html

COPY . /var/www
RUN ln -s public html

#RUN chown -R www-data:www-data /var/www

#RUN usermod -u 1000 www-data
#USER www-data
 
RUN composer install \
   && php artisan key:generate \
   && php artisan cache:clear \
   && chmod -R 775 storage

RUN npm install


FROM php:7.3.6-fpm-alpine3.9 
RUN apk add --no-cache mysql-client
RUN docker-php-ext-install mysqli pdo pdo_mysql
WORKDIR /var/www
RUN rm -rf /var/www/html

COPY --from=builder /var/www .

EXPOSE 9000
 
ENTRYPOINT ["php-fpm"]

#docker build -t dwater2/laravel-optmized -f Dockerfile.prod . //Cria uma nova imagem (dwater2/laravel-optmized) do container
#docker run --name laravel -d dwater2/laravel-optmized //Criar um novo container (laravel) da imagem (dwater2/laravel-optmized)
#docker exec -it laravel bash //Não terá o bash instalado
#docker exec -it laravel ls //Listará o conteúdo da pasta